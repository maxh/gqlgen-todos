// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/maxh/gqlgen-todos/orm/ent/entityrevision"
	"github.com/maxh/gqlgen-todos/orm/ent/organization"
	"github.com/maxh/gqlgen-todos/orm/ent/tenant"
	"github.com/maxh/gqlgen-todos/orm/ent/todo"
	"github.com/maxh/gqlgen-todos/orm/ent/user"
	"github.com/maxh/gqlgen-todos/orm/schema"
	"github.com/maxh/gqlgen-todos/qid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	entityrevisionMixin := schema.NodeRevision{}.Mixin()
	entityrevision.Policy = privacy.NewPolicies(entityrevisionMixin[0], schema.NodeRevision{})
	entityrevision.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := entityrevision.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	entityrevisionMixinHooks2 := entityrevisionMixin[2].Hooks()

	entityrevision.Hooks[1] = entityrevisionMixinHooks2[0]
	entityrevisionMixinFields1 := entityrevisionMixin[1].Fields()
	_ = entityrevisionMixinFields1
	entityrevisionMixinFields2 := entityrevisionMixin[2].Fields()
	_ = entityrevisionMixinFields2
	entityrevisionFields := schema.NodeRevision{}.Fields()
	_ = entityrevisionFields
	// entityrevisionDescCreatedAt is the schema descriptor for created_at field.
	entityrevisionDescCreatedAt := entityrevisionMixinFields2[0].Descriptor()
	// entityrevision.DefaultCreatedAt holds the default value on creation for the created_at field.
	entityrevision.DefaultCreatedAt = entityrevisionDescCreatedAt.Default.(func() time.Time)
	// entityrevisionDescUpdatedAt is the schema descriptor for updated_at field.
	entityrevisionDescUpdatedAt := entityrevisionMixinFields2[2].Descriptor()
	// entityrevision.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	entityrevision.DefaultUpdatedAt = entityrevisionDescUpdatedAt.Default.(func() time.Time)
	// entityrevision.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	entityrevision.UpdateDefaultUpdatedAt = entityrevisionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// entityrevisionDescEntityID is the schema descriptor for entity_id field.
	entityrevisionDescEntityID := entityrevisionFields[0].Descriptor()
	// entityrevision.EntityIDValidator is a validator for the "entity_id" field. It is called by the builders before save.
	entityrevision.EntityIDValidator = entityrevisionDescEntityID.Validators[0].(func(string) error)
	// entityrevisionDescEntityRevision is the schema descriptor for entity_revision field.
	entityrevisionDescEntityRevision := entityrevisionFields[1].Descriptor()
	// entityrevision.EntityRevisionValidator is a validator for the "entity_revision" field. It is called by the builders before save.
	entityrevision.EntityRevisionValidator = entityrevisionDescEntityRevision.Validators[0].(func(string) error)
	// entityrevisionDescID is the schema descriptor for id field.
	entityrevisionDescID := entityrevisionMixinFields1[0].Descriptor()
	// entityrevision.DefaultID holds the default value on creation for the id field.
	entityrevision.DefaultID = entityrevisionDescID.Default.(func() qid.ID)
	organizationMixin := schema.Organization{}.Mixin()
	organization.Policy = privacy.NewPolicies(organizationMixin[0], schema.Organization{})
	organization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := organization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	organizationMixinHooks3 := organizationMixin[3].Hooks()

	organization.Hooks[1] = organizationMixinHooks3[0]
	organizationMixinFields1 := organizationMixin[1].Fields()
	_ = organizationMixinFields1
	organizationMixinFields3 := organizationMixin[3].Fields()
	_ = organizationMixinFields3
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for created_at field.
	organizationDescCreatedAt := organizationMixinFields3[0].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the created_at field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(func() time.Time)
	// organizationDescUpdatedAt is the schema descriptor for updated_at field.
	organizationDescUpdatedAt := organizationMixinFields3[2].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(func() time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// organizationDescName is the schema descriptor for name field.
	organizationDescName := organizationFields[0].Descriptor()
	// organization.DefaultName holds the default value on creation for the name field.
	organization.DefaultName = organizationDescName.Default.(string)
	// organizationDescID is the schema descriptor for id field.
	organizationDescID := organizationMixinFields1[0].Descriptor()
	// organization.DefaultID holds the default value on creation for the id field.
	organization.DefaultID = organizationDescID.Default.(func() qid.ID)
	tenantMixin := schema.Tenant{}.Mixin()
	tenant.Policy = privacy.NewPolicies(tenantMixin[0], schema.Tenant{})
	tenant.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := tenant.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	tenantMixinHooks2 := tenantMixin[2].Hooks()

	tenant.Hooks[1] = tenantMixinHooks2[0]
	tenantMixinFields1 := tenantMixin[1].Fields()
	_ = tenantMixinFields1
	tenantMixinFields2 := tenantMixin[2].Fields()
	_ = tenantMixinFields2
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescCreatedAt is the schema descriptor for created_at field.
	tenantDescCreatedAt := tenantMixinFields2[0].Descriptor()
	// tenant.DefaultCreatedAt holds the default value on creation for the created_at field.
	tenant.DefaultCreatedAt = tenantDescCreatedAt.Default.(func() time.Time)
	// tenantDescUpdatedAt is the schema descriptor for updated_at field.
	tenantDescUpdatedAt := tenantMixinFields2[2].Descriptor()
	// tenant.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	tenant.DefaultUpdatedAt = tenantDescUpdatedAt.Default.(func() time.Time)
	// tenant.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	tenant.UpdateDefaultUpdatedAt = tenantDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tenantDescName is the schema descriptor for name field.
	tenantDescName := tenantFields[0].Descriptor()
	// tenant.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tenant.NameValidator = tenantDescName.Validators[0].(func(string) error)
	// tenantDescID is the schema descriptor for id field.
	tenantDescID := tenantMixinFields1[0].Descriptor()
	// tenant.DefaultID holds the default value on creation for the id field.
	tenant.DefaultID = tenantDescID.Default.(func() qid.ID)
	todoMixin := schema.Todo{}.Mixin()
	todo.Policy = privacy.NewPolicies(todoMixin[0], schema.Todo{})
	todo.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := todo.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	todoMixinHooks3 := todoMixin[3].Hooks()

	todo.Hooks[1] = todoMixinHooks3[0]
	todoMixinFields1 := todoMixin[1].Fields()
	_ = todoMixinFields1
	todoMixinFields3 := todoMixin[3].Fields()
	_ = todoMixinFields3
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescCreatedAt is the schema descriptor for created_at field.
	todoDescCreatedAt := todoMixinFields3[0].Descriptor()
	// todo.DefaultCreatedAt holds the default value on creation for the created_at field.
	todo.DefaultCreatedAt = todoDescCreatedAt.Default.(func() time.Time)
	// todoDescUpdatedAt is the schema descriptor for updated_at field.
	todoDescUpdatedAt := todoMixinFields3[2].Descriptor()
	// todo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	todo.DefaultUpdatedAt = todoDescUpdatedAt.Default.(func() time.Time)
	// todo.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	todo.UpdateDefaultUpdatedAt = todoDescUpdatedAt.UpdateDefault.(func() time.Time)
	// todoDescText is the schema descriptor for text field.
	todoDescText := todoFields[0].Descriptor()
	// todo.DefaultText holds the default value on creation for the text field.
	todo.DefaultText = todoDescText.Default.(string)
	// todoDescDone is the schema descriptor for done field.
	todoDescDone := todoFields[1].Descriptor()
	// todo.DefaultDone holds the default value on creation for the done field.
	todo.DefaultDone = todoDescDone.Default.(bool)
	// todoDescID is the schema descriptor for id field.
	todoDescID := todoMixinFields1[0].Descriptor()
	// todo.DefaultID holds the default value on creation for the id field.
	todo.DefaultID = todoDescID.Default.(func() qid.ID)
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(userMixin[0], schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userMixinHooks3 := userMixin[3].Hooks()

	user.Hooks[1] = userMixinHooks3[0]
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userMixinFields3 := userMixin[3].Fields()
	_ = userMixinFields3
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields3[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields3[2].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields1[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() qid.ID)
}

const (
	Version = "(devel)" // Version of ent codegen.
)
