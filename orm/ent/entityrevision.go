// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maxh/gqlgen-todos/orm/ent/entityrevision"
	"github.com/maxh/gqlgen-todos/qid"
)

// EntityRevision is the model entity for the EntityRevision schema.
type EntityRevision struct {
	config `json:"-"`
	// ID of the ent.
	ID qid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy qid.ID `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy qid.ID `json:"updated_by,omitempty"`
	// EntityID holds the value of the "entity_id" field.
	EntityID string `json:"entity_id,omitempty"`
	// EntityRevision holds the value of the "entity_revision" field.
	EntityRevision string `json:"entity_revision,omitempty"`
	// EntityValue holds the value of the "entity_value" field.
	EntityValue *interface{} `json:"entity_value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntityRevision) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case entityrevision.FieldEntityValue:
			values[i] = new([]byte)
		case entityrevision.FieldID, entityrevision.FieldCreatedBy, entityrevision.FieldUpdatedBy:
			values[i] = new(qid.ID)
		case entityrevision.FieldEntityID, entityrevision.FieldEntityRevision:
			values[i] = new(sql.NullString)
		case entityrevision.FieldCreatedAt, entityrevision.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EntityRevision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntityRevision fields.
func (er *EntityRevision) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entityrevision.FieldID:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				er.ID = *value
			}
		case entityrevision.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				er.CreatedAt = value.Time
			}
		case entityrevision.FieldCreatedBy:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				er.CreatedBy = *value
			}
		case entityrevision.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				er.UpdatedAt = value.Time
			}
		case entityrevision.FieldUpdatedBy:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				er.UpdatedBy = *value
			}
		case entityrevision.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				er.EntityID = value.String
			}
		case entityrevision.FieldEntityRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_revision", values[i])
			} else if value.Valid {
				er.EntityRevision = value.String
			}
		case entityrevision.FieldEntityValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field entity_value", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &er.EntityValue); err != nil {
					return fmt.Errorf("unmarshal field entity_value: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this EntityRevision.
// Note that you need to call EntityRevision.Unwrap() before calling this method if this EntityRevision
// was returned from a transaction, and the transaction was committed or rolled back.
func (er *EntityRevision) Update() *EntityRevisionUpdateOne {
	return (&EntityRevisionClient{config: er.config}).UpdateOne(er)
}

// Unwrap unwraps the EntityRevision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (er *EntityRevision) Unwrap() *EntityRevision {
	tx, ok := er.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntityRevision is not a transactional entity")
	}
	er.config.driver = tx.drv
	return er
}

// String implements the fmt.Stringer.
func (er *EntityRevision) String() string {
	var builder strings.Builder
	builder.WriteString("EntityRevision(")
	builder.WriteString(fmt.Sprintf("id=%v", er.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(er.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", er.CreatedBy))
	builder.WriteString(", updated_at=")
	builder.WriteString(er.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", er.UpdatedBy))
	builder.WriteString(", entity_id=")
	builder.WriteString(er.EntityID)
	builder.WriteString(", entity_revision=")
	builder.WriteString(er.EntityRevision)
	builder.WriteString(", entity_value=")
	builder.WriteString(fmt.Sprintf("%v", er.EntityValue))
	builder.WriteByte(')')
	return builder.String()
}

// EntityRevisions is a parsable slice of EntityRevision.
type EntityRevisions []*EntityRevision

func (er EntityRevisions) config(cfg config) {
	for _i := range er {
		er[_i].config = cfg
	}
}
