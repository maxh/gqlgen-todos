// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxh/gqlgen-todos/orm/ent/noderevision"
	"github.com/maxh/gqlgen-todos/orm/ent/predicate"
	"github.com/maxh/gqlgen-todos/qid"
)

// NodeRevisionQuery is the builder for querying NodeRevision entities.
type NodeRevisionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.NodeRevision
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NodeRevisionQuery builder.
func (nrq *NodeRevisionQuery) Where(ps ...predicate.NodeRevision) *NodeRevisionQuery {
	nrq.predicates = append(nrq.predicates, ps...)
	return nrq
}

// Limit adds a limit step to the query.
func (nrq *NodeRevisionQuery) Limit(limit int) *NodeRevisionQuery {
	nrq.limit = &limit
	return nrq
}

// Offset adds an offset step to the query.
func (nrq *NodeRevisionQuery) Offset(offset int) *NodeRevisionQuery {
	nrq.offset = &offset
	return nrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nrq *NodeRevisionQuery) Unique(unique bool) *NodeRevisionQuery {
	nrq.unique = &unique
	return nrq
}

// Order adds an order step to the query.
func (nrq *NodeRevisionQuery) Order(o ...OrderFunc) *NodeRevisionQuery {
	nrq.order = append(nrq.order, o...)
	return nrq
}

// First returns the first NodeRevision entity from the query.
// Returns a *NotFoundError when no NodeRevision was found.
func (nrq *NodeRevisionQuery) First(ctx context.Context) (*NodeRevision, error) {
	nodes, err := nrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{noderevision.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nrq *NodeRevisionQuery) FirstX(ctx context.Context) *NodeRevision {
	node, err := nrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NodeRevision ID from the query.
// Returns a *NotFoundError when no NodeRevision ID was found.
func (nrq *NodeRevisionQuery) FirstID(ctx context.Context) (id qid.ID, err error) {
	var ids []qid.ID
	if ids, err = nrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{noderevision.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nrq *NodeRevisionQuery) FirstIDX(ctx context.Context) qid.ID {
	id, err := nrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NodeRevision entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one NodeRevision entity is not found.
// Returns a *NotFoundError when no NodeRevision entities are found.
func (nrq *NodeRevisionQuery) Only(ctx context.Context) (*NodeRevision, error) {
	nodes, err := nrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{noderevision.Label}
	default:
		return nil, &NotSingularError{noderevision.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nrq *NodeRevisionQuery) OnlyX(ctx context.Context) *NodeRevision {
	node, err := nrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NodeRevision ID in the query.
// Returns a *NotSingularError when exactly one NodeRevision ID is not found.
// Returns a *NotFoundError when no entities are found.
func (nrq *NodeRevisionQuery) OnlyID(ctx context.Context) (id qid.ID, err error) {
	var ids []qid.ID
	if ids, err = nrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = &NotSingularError{noderevision.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nrq *NodeRevisionQuery) OnlyIDX(ctx context.Context) qid.ID {
	id, err := nrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NodeRevisions.
func (nrq *NodeRevisionQuery) All(ctx context.Context) ([]*NodeRevision, error) {
	if err := nrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nrq *NodeRevisionQuery) AllX(ctx context.Context) []*NodeRevision {
	nodes, err := nrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NodeRevision IDs.
func (nrq *NodeRevisionQuery) IDs(ctx context.Context) ([]qid.ID, error) {
	var ids []qid.ID
	if err := nrq.Select(noderevision.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nrq *NodeRevisionQuery) IDsX(ctx context.Context) []qid.ID {
	ids, err := nrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nrq *NodeRevisionQuery) Count(ctx context.Context) (int, error) {
	if err := nrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nrq *NodeRevisionQuery) CountX(ctx context.Context) int {
	count, err := nrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nrq *NodeRevisionQuery) Exist(ctx context.Context) (bool, error) {
	if err := nrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nrq *NodeRevisionQuery) ExistX(ctx context.Context) bool {
	exist, err := nrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NodeRevisionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nrq *NodeRevisionQuery) Clone() *NodeRevisionQuery {
	if nrq == nil {
		return nil
	}
	return &NodeRevisionQuery{
		config:     nrq.config,
		limit:      nrq.limit,
		offset:     nrq.offset,
		order:      append([]OrderFunc{}, nrq.order...),
		predicates: append([]predicate.NodeRevision{}, nrq.predicates...),
		// clone intermediate query.
		sql:  nrq.sql.Clone(),
		path: nrq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NodeRevision.Query().
//		GroupBy(noderevision.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (nrq *NodeRevisionQuery) GroupBy(field string, fields ...string) *NodeRevisionGroupBy {
	group := &NodeRevisionGroupBy{config: nrq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nrq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.NodeRevision.Query().
//		Select(noderevision.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (nrq *NodeRevisionQuery) Select(fields ...string) *NodeRevisionSelect {
	nrq.fields = append(nrq.fields, fields...)
	return &NodeRevisionSelect{NodeRevisionQuery: nrq}
}

func (nrq *NodeRevisionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nrq.fields {
		if !noderevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nrq.path != nil {
		prev, err := nrq.path(ctx)
		if err != nil {
			return err
		}
		nrq.sql = prev
	}
	if noderevision.Policy == nil {
		return errors.New("ent: uninitialized noderevision.Policy (forgotten import ent/runtime?)")
	}
	if err := noderevision.Policy.EvalQuery(ctx, nrq); err != nil {
		return err
	}
	return nil
}

func (nrq *NodeRevisionQuery) sqlAll(ctx context.Context) ([]*NodeRevision, error) {
	var (
		nodes = []*NodeRevision{}
		_spec = nrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &NodeRevision{config: nrq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, nrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (nrq *NodeRevisionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nrq.querySpec()
	return sqlgraph.CountNodes(ctx, nrq.driver, _spec)
}

func (nrq *NodeRevisionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := nrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (nrq *NodeRevisionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   noderevision.Table,
			Columns: noderevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: noderevision.FieldID,
			},
		},
		From:   nrq.sql,
		Unique: true,
	}
	if unique := nrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, noderevision.FieldID)
		for i := range fields {
			if fields[i] != noderevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nrq *NodeRevisionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nrq.driver.Dialect())
	t1 := builder.Table(noderevision.Table)
	columns := nrq.fields
	if len(columns) == 0 {
		columns = noderevision.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nrq.sql != nil {
		selector = nrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range nrq.predicates {
		p(selector)
	}
	for _, p := range nrq.order {
		p(selector)
	}
	if offset := nrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NodeRevisionGroupBy is the group-by builder for NodeRevision entities.
type NodeRevisionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nrgb *NodeRevisionGroupBy) Aggregate(fns ...AggregateFunc) *NodeRevisionGroupBy {
	nrgb.fns = append(nrgb.fns, fns...)
	return nrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (nrgb *NodeRevisionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := nrgb.path(ctx)
	if err != nil {
		return err
	}
	nrgb.sql = query
	return nrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := nrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(nrgb.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := nrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) StringsX(ctx context.Context) []string {
	v, err := nrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nrgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) StringX(ctx context.Context) string {
	v, err := nrgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(nrgb.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := nrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) IntsX(ctx context.Context) []int {
	v, err := nrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nrgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) IntX(ctx context.Context) int {
	v, err := nrgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(nrgb.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := nrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := nrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nrgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := nrgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(nrgb.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := nrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := nrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (nrgb *NodeRevisionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nrgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nrgb *NodeRevisionGroupBy) BoolX(ctx context.Context) bool {
	v, err := nrgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nrgb *NodeRevisionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range nrgb.fields {
		if !noderevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := nrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nrgb *NodeRevisionGroupBy) sqlQuery() *sql.Selector {
	selector := nrgb.sql.Select()
	aggregation := make([]string, 0, len(nrgb.fns))
	for _, fn := range nrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(nrgb.fields)+len(nrgb.fns))
		for _, f := range nrgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(nrgb.fields...)...)
}

// NodeRevisionSelect is the builder for selecting fields of NodeRevision entities.
type NodeRevisionSelect struct {
	*NodeRevisionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (nrs *NodeRevisionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := nrs.prepareQuery(ctx); err != nil {
		return err
	}
	nrs.sql = nrs.NodeRevisionQuery.sqlQuery(ctx)
	return nrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (nrs *NodeRevisionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := nrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(nrs.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := nrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (nrs *NodeRevisionSelect) StringsX(ctx context.Context) []string {
	v, err := nrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = nrs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (nrs *NodeRevisionSelect) StringX(ctx context.Context) string {
	v, err := nrs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(nrs.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := nrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (nrs *NodeRevisionSelect) IntsX(ctx context.Context) []int {
	v, err := nrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = nrs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (nrs *NodeRevisionSelect) IntX(ctx context.Context) int {
	v, err := nrs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(nrs.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := nrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (nrs *NodeRevisionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := nrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = nrs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (nrs *NodeRevisionSelect) Float64X(ctx context.Context) float64 {
	v, err := nrs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(nrs.fields) > 1 {
		return nil, errors.New("ent: NodeRevisionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := nrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (nrs *NodeRevisionSelect) BoolsX(ctx context.Context) []bool {
	v, err := nrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (nrs *NodeRevisionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = nrs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{noderevision.Label}
	default:
		err = fmt.Errorf("ent: NodeRevisionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (nrs *NodeRevisionSelect) BoolX(ctx context.Context) bool {
	v, err := nrs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nrs *NodeRevisionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := nrs.sql.Query()
	if err := nrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
