// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxh/gqlgen-todos/orm/ent/entityrevision"
	"github.com/maxh/gqlgen-todos/orm/ent/predicate"
	"github.com/maxh/gqlgen-todos/qid"
)

// EntityRevisionQuery is the builder for querying EntityRevision entities.
type EntityRevisionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EntityRevision
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntityRevisionQuery builder.
func (erq *EntityRevisionQuery) Where(ps ...predicate.EntityRevision) *EntityRevisionQuery {
	erq.predicates = append(erq.predicates, ps...)
	return erq
}

// Limit adds a limit step to the query.
func (erq *EntityRevisionQuery) Limit(limit int) *EntityRevisionQuery {
	erq.limit = &limit
	return erq
}

// Offset adds an offset step to the query.
func (erq *EntityRevisionQuery) Offset(offset int) *EntityRevisionQuery {
	erq.offset = &offset
	return erq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (erq *EntityRevisionQuery) Unique(unique bool) *EntityRevisionQuery {
	erq.unique = &unique
	return erq
}

// Order adds an order step to the query.
func (erq *EntityRevisionQuery) Order(o ...OrderFunc) *EntityRevisionQuery {
	erq.order = append(erq.order, o...)
	return erq
}

// First returns the first EntityRevision entity from the query.
// Returns a *NotFoundError when no EntityRevision was found.
func (erq *EntityRevisionQuery) First(ctx context.Context) (*EntityRevision, error) {
	nodes, err := erq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entityrevision.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (erq *EntityRevisionQuery) FirstX(ctx context.Context) *EntityRevision {
	node, err := erq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntityRevision ID from the query.
// Returns a *NotFoundError when no EntityRevision ID was found.
func (erq *EntityRevisionQuery) FirstID(ctx context.Context) (id qid.ID, err error) {
	var ids []qid.ID
	if ids, err = erq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entityrevision.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (erq *EntityRevisionQuery) FirstIDX(ctx context.Context) qid.ID {
	id, err := erq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntityRevision entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one EntityRevision entity is not found.
// Returns a *NotFoundError when no EntityRevision entities are found.
func (erq *EntityRevisionQuery) Only(ctx context.Context) (*EntityRevision, error) {
	nodes, err := erq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entityrevision.Label}
	default:
		return nil, &NotSingularError{entityrevision.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (erq *EntityRevisionQuery) OnlyX(ctx context.Context) *EntityRevision {
	node, err := erq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntityRevision ID in the query.
// Returns a *NotSingularError when exactly one EntityRevision ID is not found.
// Returns a *NotFoundError when no entities are found.
func (erq *EntityRevisionQuery) OnlyID(ctx context.Context) (id qid.ID, err error) {
	var ids []qid.ID
	if ids, err = erq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = &NotSingularError{entityrevision.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (erq *EntityRevisionQuery) OnlyIDX(ctx context.Context) qid.ID {
	id, err := erq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntityRevisions.
func (erq *EntityRevisionQuery) All(ctx context.Context) ([]*EntityRevision, error) {
	if err := erq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return erq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (erq *EntityRevisionQuery) AllX(ctx context.Context) []*EntityRevision {
	nodes, err := erq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntityRevision IDs.
func (erq *EntityRevisionQuery) IDs(ctx context.Context) ([]qid.ID, error) {
	var ids []qid.ID
	if err := erq.Select(entityrevision.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (erq *EntityRevisionQuery) IDsX(ctx context.Context) []qid.ID {
	ids, err := erq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (erq *EntityRevisionQuery) Count(ctx context.Context) (int, error) {
	if err := erq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return erq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (erq *EntityRevisionQuery) CountX(ctx context.Context) int {
	count, err := erq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (erq *EntityRevisionQuery) Exist(ctx context.Context) (bool, error) {
	if err := erq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return erq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (erq *EntityRevisionQuery) ExistX(ctx context.Context) bool {
	exist, err := erq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntityRevisionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (erq *EntityRevisionQuery) Clone() *EntityRevisionQuery {
	if erq == nil {
		return nil
	}
	return &EntityRevisionQuery{
		config:     erq.config,
		limit:      erq.limit,
		offset:     erq.offset,
		order:      append([]OrderFunc{}, erq.order...),
		predicates: append([]predicate.EntityRevision{}, erq.predicates...),
		// clone intermediate query.
		sql:  erq.sql.Clone(),
		path: erq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntityRevision.Query().
//		GroupBy(entityrevision.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (erq *EntityRevisionQuery) GroupBy(field string, fields ...string) *EntityRevisionGroupBy {
	group := &EntityRevisionGroupBy{config: erq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := erq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return erq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EntityRevision.Query().
//		Select(entityrevision.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (erq *EntityRevisionQuery) Select(fields ...string) *EntityRevisionSelect {
	erq.fields = append(erq.fields, fields...)
	return &EntityRevisionSelect{EntityRevisionQuery: erq}
}

func (erq *EntityRevisionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range erq.fields {
		if !entityrevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if erq.path != nil {
		prev, err := erq.path(ctx)
		if err != nil {
			return err
		}
		erq.sql = prev
	}
	if entityrevision.Policy == nil {
		return errors.New("ent: uninitialized entityrevision.Policy (forgotten import ent/runtime?)")
	}
	if err := entityrevision.Policy.EvalQuery(ctx, erq); err != nil {
		return err
	}
	return nil
}

func (erq *EntityRevisionQuery) sqlAll(ctx context.Context) ([]*EntityRevision, error) {
	var (
		nodes = []*EntityRevision{}
		_spec = erq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &EntityRevision{config: erq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, erq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (erq *EntityRevisionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := erq.querySpec()
	return sqlgraph.CountNodes(ctx, erq.driver, _spec)
}

func (erq *EntityRevisionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := erq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (erq *EntityRevisionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entityrevision.Table,
			Columns: entityrevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entityrevision.FieldID,
			},
		},
		From:   erq.sql,
		Unique: true,
	}
	if unique := erq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := erq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entityrevision.FieldID)
		for i := range fields {
			if fields[i] != entityrevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := erq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := erq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := erq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := erq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (erq *EntityRevisionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(erq.driver.Dialect())
	t1 := builder.Table(entityrevision.Table)
	columns := erq.fields
	if len(columns) == 0 {
		columns = entityrevision.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if erq.sql != nil {
		selector = erq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range erq.predicates {
		p(selector)
	}
	for _, p := range erq.order {
		p(selector)
	}
	if offset := erq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := erq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EntityRevisionGroupBy is the group-by builder for EntityRevision entities.
type EntityRevisionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ergb *EntityRevisionGroupBy) Aggregate(fns ...AggregateFunc) *EntityRevisionGroupBy {
	ergb.fns = append(ergb.fns, fns...)
	return ergb
}

// Scan applies the group-by query and scans the result into the given value.
func (ergb *EntityRevisionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ergb.path(ctx)
	if err != nil {
		return err
	}
	ergb.sql = query
	return ergb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ergb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) StringsX(ctx context.Context) []string {
	v, err := ergb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ergb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) StringX(ctx context.Context) string {
	v, err := ergb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) IntsX(ctx context.Context) []int {
	v, err := ergb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ergb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) IntX(ctx context.Context) int {
	v, err := ergb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ergb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ergb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ergb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ergb.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ergb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ergb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ergb *EntityRevisionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ergb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ergb *EntityRevisionGroupBy) BoolX(ctx context.Context) bool {
	v, err := ergb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ergb *EntityRevisionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ergb.fields {
		if !entityrevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ergb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ergb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ergb *EntityRevisionGroupBy) sqlQuery() *sql.Selector {
	selector := ergb.sql.Select()
	aggregation := make([]string, 0, len(ergb.fns))
	for _, fn := range ergb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ergb.fields)+len(ergb.fns))
		for _, f := range ergb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ergb.fields...)...)
}

// EntityRevisionSelect is the builder for selecting fields of EntityRevision entities.
type EntityRevisionSelect struct {
	*EntityRevisionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ers *EntityRevisionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ers.prepareQuery(ctx); err != nil {
		return err
	}
	ers.sql = ers.EntityRevisionQuery.sqlQuery(ctx)
	return ers.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ers *EntityRevisionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ers.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ers *EntityRevisionSelect) StringsX(ctx context.Context) []string {
	v, err := ers.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ers.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ers *EntityRevisionSelect) StringX(ctx context.Context) string {
	v, err := ers.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ers *EntityRevisionSelect) IntsX(ctx context.Context) []int {
	v, err := ers.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ers.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ers *EntityRevisionSelect) IntX(ctx context.Context) int {
	v, err := ers.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ers *EntityRevisionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ers.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ers.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ers *EntityRevisionSelect) Float64X(ctx context.Context) float64 {
	v, err := ers.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ers.fields) > 1 {
		return nil, errors.New("ent: EntityRevisionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ers.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ers *EntityRevisionSelect) BoolsX(ctx context.Context) []bool {
	v, err := ers.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ers *EntityRevisionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ers.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{entityrevision.Label}
	default:
		err = fmt.Errorf("ent: EntityRevisionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ers *EntityRevisionSelect) BoolX(ctx context.Context) bool {
	v, err := ers.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ers *EntityRevisionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ers.sql.Query()
	if err := ers.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
