// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxh/gqlgen-todos/orm/ent/noderevision"
	"github.com/maxh/gqlgen-todos/orm/ent/predicate"
	"github.com/maxh/gqlgen-todos/qid"
)

// NodeRevisionUpdate is the builder for updating NodeRevision entities.
type NodeRevisionUpdate struct {
	config
	hooks    []Hook
	mutation *NodeRevisionMutation
}

// Where appends a list predicates to the NodeRevisionUpdate builder.
func (nru *NodeRevisionUpdate) Where(ps ...predicate.NodeRevision) *NodeRevisionUpdate {
	nru.mutation.Where(ps...)
	return nru
}

// SetCreatedBy sets the "created_by" field.
func (nru *NodeRevisionUpdate) SetCreatedBy(q qid.ID) *NodeRevisionUpdate {
	nru.mutation.SetCreatedBy(q)
	return nru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nru *NodeRevisionUpdate) SetNillableCreatedBy(q *qid.ID) *NodeRevisionUpdate {
	if q != nil {
		nru.SetCreatedBy(*q)
	}
	return nru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (nru *NodeRevisionUpdate) ClearCreatedBy() *NodeRevisionUpdate {
	nru.mutation.ClearCreatedBy()
	return nru
}

// SetUpdatedAt sets the "updated_at" field.
func (nru *NodeRevisionUpdate) SetUpdatedAt(t time.Time) *NodeRevisionUpdate {
	nru.mutation.SetUpdatedAt(t)
	return nru
}

// SetUpdatedBy sets the "updated_by" field.
func (nru *NodeRevisionUpdate) SetUpdatedBy(q qid.ID) *NodeRevisionUpdate {
	nru.mutation.SetUpdatedBy(q)
	return nru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nru *NodeRevisionUpdate) SetNillableUpdatedBy(q *qid.ID) *NodeRevisionUpdate {
	if q != nil {
		nru.SetUpdatedBy(*q)
	}
	return nru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nru *NodeRevisionUpdate) ClearUpdatedBy() *NodeRevisionUpdate {
	nru.mutation.ClearUpdatedBy()
	return nru
}

// Mutation returns the NodeRevisionMutation object of the builder.
func (nru *NodeRevisionUpdate) Mutation() *NodeRevisionMutation {
	return nru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nru *NodeRevisionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := nru.defaults(); err != nil {
		return 0, err
	}
	if len(nru.hooks) == 0 {
		affected, err = nru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nru.mutation = mutation
			affected, err = nru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nru.hooks) - 1; i >= 0; i-- {
			if nru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nru *NodeRevisionUpdate) SaveX(ctx context.Context) int {
	affected, err := nru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nru *NodeRevisionUpdate) Exec(ctx context.Context) error {
	_, err := nru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nru *NodeRevisionUpdate) ExecX(ctx context.Context) {
	if err := nru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nru *NodeRevisionUpdate) defaults() error {
	if _, ok := nru.mutation.UpdatedAt(); !ok {
		if noderevision.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized noderevision.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := noderevision.UpdateDefaultUpdatedAt()
		nru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nru *NodeRevisionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   noderevision.Table,
			Columns: noderevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: noderevision.FieldID,
			},
		},
	}
	if ps := nru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noderevision.FieldCreatedBy,
		})
	}
	if nru.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noderevision.FieldCreatedBy,
		})
	}
	if value, ok := nru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: noderevision.FieldUpdatedAt,
		})
	}
	if value, ok := nru.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noderevision.FieldUpdatedBy,
		})
	}
	if nru.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noderevision.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noderevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NodeRevisionUpdateOne is the builder for updating a single NodeRevision entity.
type NodeRevisionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeRevisionMutation
}

// SetCreatedBy sets the "created_by" field.
func (nruo *NodeRevisionUpdateOne) SetCreatedBy(q qid.ID) *NodeRevisionUpdateOne {
	nruo.mutation.SetCreatedBy(q)
	return nruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nruo *NodeRevisionUpdateOne) SetNillableCreatedBy(q *qid.ID) *NodeRevisionUpdateOne {
	if q != nil {
		nruo.SetCreatedBy(*q)
	}
	return nruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (nruo *NodeRevisionUpdateOne) ClearCreatedBy() *NodeRevisionUpdateOne {
	nruo.mutation.ClearCreatedBy()
	return nruo
}

// SetUpdatedAt sets the "updated_at" field.
func (nruo *NodeRevisionUpdateOne) SetUpdatedAt(t time.Time) *NodeRevisionUpdateOne {
	nruo.mutation.SetUpdatedAt(t)
	return nruo
}

// SetUpdatedBy sets the "updated_by" field.
func (nruo *NodeRevisionUpdateOne) SetUpdatedBy(q qid.ID) *NodeRevisionUpdateOne {
	nruo.mutation.SetUpdatedBy(q)
	return nruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nruo *NodeRevisionUpdateOne) SetNillableUpdatedBy(q *qid.ID) *NodeRevisionUpdateOne {
	if q != nil {
		nruo.SetUpdatedBy(*q)
	}
	return nruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (nruo *NodeRevisionUpdateOne) ClearUpdatedBy() *NodeRevisionUpdateOne {
	nruo.mutation.ClearUpdatedBy()
	return nruo
}

// Mutation returns the NodeRevisionMutation object of the builder.
func (nruo *NodeRevisionUpdateOne) Mutation() *NodeRevisionMutation {
	return nruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nruo *NodeRevisionUpdateOne) Select(field string, fields ...string) *NodeRevisionUpdateOne {
	nruo.fields = append([]string{field}, fields...)
	return nruo
}

// Save executes the query and returns the updated NodeRevision entity.
func (nruo *NodeRevisionUpdateOne) Save(ctx context.Context) (*NodeRevision, error) {
	var (
		err  error
		node *NodeRevision
	)
	if err := nruo.defaults(); err != nil {
		return nil, err
	}
	if len(nruo.hooks) == 0 {
		node, err = nruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nruo.mutation = mutation
			node, err = nruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nruo.hooks) - 1; i >= 0; i-- {
			if nruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nruo *NodeRevisionUpdateOne) SaveX(ctx context.Context) *NodeRevision {
	node, err := nruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nruo *NodeRevisionUpdateOne) Exec(ctx context.Context) error {
	_, err := nruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nruo *NodeRevisionUpdateOne) ExecX(ctx context.Context) {
	if err := nruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nruo *NodeRevisionUpdateOne) defaults() error {
	if _, ok := nruo.mutation.UpdatedAt(); !ok {
		if noderevision.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized noderevision.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := noderevision.UpdateDefaultUpdatedAt()
		nruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (nruo *NodeRevisionUpdateOne) sqlSave(ctx context.Context) (_node *NodeRevision, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   noderevision.Table,
			Columns: noderevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: noderevision.FieldID,
			},
		},
	}
	id, ok := nruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NodeRevision.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := nruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, noderevision.FieldID)
		for _, f := range fields {
			if !noderevision.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != noderevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noderevision.FieldCreatedBy,
		})
	}
	if nruo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noderevision.FieldCreatedBy,
		})
	}
	if value, ok := nruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: noderevision.FieldUpdatedAt,
		})
	}
	if value, ok := nruo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: noderevision.FieldUpdatedBy,
		})
	}
	if nruo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: noderevision.FieldUpdatedBy,
		})
	}
	_node = &NodeRevision{config: nruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{noderevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
