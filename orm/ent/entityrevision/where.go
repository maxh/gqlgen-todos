// Code generated by entc, DO NOT EDIT.

package entityrevision

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maxh/gqlgen-todos/orm/ent/predicate"
	"github.com/maxh/gqlgen-todos/qid"
)

// ID filters vertices based on their ID field.
func ID(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// EntityID applies equality check predicate on the "entity_id" field. It's identical to EntityIDEQ.
func EntityID(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityID), v))
	})
}

// EntityRevision applies equality check predicate on the "entity_revision" field. It's identical to EntityRevisionEQ.
func EntityRevision(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityRevision), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...qid.ID) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...qid.ID) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), vc))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), vc))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...qid.ID) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...qid.ID) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v qid.ID) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), vc))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v qid.ID) predicate.EntityRevision {
	vc := string(v)
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), vc))
	})
}

// EntityIDEQ applies the EQ predicate on the "entity_id" field.
func EntityIDEQ(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityID), v))
	})
}

// EntityIDNEQ applies the NEQ predicate on the "entity_id" field.
func EntityIDNEQ(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityID), v))
	})
}

// EntityIDIn applies the In predicate on the "entity_id" field.
func EntityIDIn(vs ...string) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntityID), v...))
	})
}

// EntityIDNotIn applies the NotIn predicate on the "entity_id" field.
func EntityIDNotIn(vs ...string) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntityID), v...))
	})
}

// EntityIDGT applies the GT predicate on the "entity_id" field.
func EntityIDGT(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntityID), v))
	})
}

// EntityIDGTE applies the GTE predicate on the "entity_id" field.
func EntityIDGTE(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntityID), v))
	})
}

// EntityIDLT applies the LT predicate on the "entity_id" field.
func EntityIDLT(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntityID), v))
	})
}

// EntityIDLTE applies the LTE predicate on the "entity_id" field.
func EntityIDLTE(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntityID), v))
	})
}

// EntityIDContains applies the Contains predicate on the "entity_id" field.
func EntityIDContains(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEntityID), v))
	})
}

// EntityIDHasPrefix applies the HasPrefix predicate on the "entity_id" field.
func EntityIDHasPrefix(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEntityID), v))
	})
}

// EntityIDHasSuffix applies the HasSuffix predicate on the "entity_id" field.
func EntityIDHasSuffix(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEntityID), v))
	})
}

// EntityIDEqualFold applies the EqualFold predicate on the "entity_id" field.
func EntityIDEqualFold(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEntityID), v))
	})
}

// EntityIDContainsFold applies the ContainsFold predicate on the "entity_id" field.
func EntityIDContainsFold(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEntityID), v))
	})
}

// EntityRevisionEQ applies the EQ predicate on the "entity_revision" field.
func EntityRevisionEQ(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionNEQ applies the NEQ predicate on the "entity_revision" field.
func EntityRevisionNEQ(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionIn applies the In predicate on the "entity_revision" field.
func EntityRevisionIn(vs ...string) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEntityRevision), v...))
	})
}

// EntityRevisionNotIn applies the NotIn predicate on the "entity_revision" field.
func EntityRevisionNotIn(vs ...string) predicate.EntityRevision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EntityRevision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEntityRevision), v...))
	})
}

// EntityRevisionGT applies the GT predicate on the "entity_revision" field.
func EntityRevisionGT(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionGTE applies the GTE predicate on the "entity_revision" field.
func EntityRevisionGTE(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionLT applies the LT predicate on the "entity_revision" field.
func EntityRevisionLT(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionLTE applies the LTE predicate on the "entity_revision" field.
func EntityRevisionLTE(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionContains applies the Contains predicate on the "entity_revision" field.
func EntityRevisionContains(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionHasPrefix applies the HasPrefix predicate on the "entity_revision" field.
func EntityRevisionHasPrefix(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionHasSuffix applies the HasSuffix predicate on the "entity_revision" field.
func EntityRevisionHasSuffix(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionEqualFold applies the EqualFold predicate on the "entity_revision" field.
func EntityRevisionEqualFold(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEntityRevision), v))
	})
}

// EntityRevisionContainsFold applies the ContainsFold predicate on the "entity_revision" field.
func EntityRevisionContainsFold(v string) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEntityRevision), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntityRevision) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntityRevision) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntityRevision) predicate.EntityRevision {
	return predicate.EntityRevision(func(s *sql.Selector) {
		p(s.Not())
	})
}
