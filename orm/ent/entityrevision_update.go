// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/maxh/gqlgen-todos/orm/ent/entityrevision"
	"github.com/maxh/gqlgen-todos/orm/ent/predicate"
	"github.com/maxh/gqlgen-todos/qid"
)

// EntityRevisionUpdate is the builder for updating EntityRevision entities.
type EntityRevisionUpdate struct {
	config
	hooks    []Hook
	mutation *EntityRevisionMutation
}

// Where appends a list predicates to the EntityRevisionUpdate builder.
func (eru *EntityRevisionUpdate) Where(ps ...predicate.EntityRevision) *EntityRevisionUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetCreatedBy sets the "created_by" field.
func (eru *EntityRevisionUpdate) SetCreatedBy(q qid.ID) *EntityRevisionUpdate {
	eru.mutation.SetCreatedBy(q)
	return eru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eru *EntityRevisionUpdate) SetNillableCreatedBy(q *qid.ID) *EntityRevisionUpdate {
	if q != nil {
		eru.SetCreatedBy(*q)
	}
	return eru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eru *EntityRevisionUpdate) ClearCreatedBy() *EntityRevisionUpdate {
	eru.mutation.ClearCreatedBy()
	return eru
}

// SetUpdatedAt sets the "updated_at" field.
func (eru *EntityRevisionUpdate) SetUpdatedAt(t time.Time) *EntityRevisionUpdate {
	eru.mutation.SetUpdatedAt(t)
	return eru
}

// SetUpdatedBy sets the "updated_by" field.
func (eru *EntityRevisionUpdate) SetUpdatedBy(q qid.ID) *EntityRevisionUpdate {
	eru.mutation.SetUpdatedBy(q)
	return eru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eru *EntityRevisionUpdate) SetNillableUpdatedBy(q *qid.ID) *EntityRevisionUpdate {
	if q != nil {
		eru.SetUpdatedBy(*q)
	}
	return eru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eru *EntityRevisionUpdate) ClearUpdatedBy() *EntityRevisionUpdate {
	eru.mutation.ClearUpdatedBy()
	return eru
}

// Mutation returns the EntityRevisionMutation object of the builder.
func (eru *EntityRevisionUpdate) Mutation() *EntityRevisionMutation {
	return eru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *EntityRevisionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eru.defaults(); err != nil {
		return 0, err
	}
	if len(eru.hooks) == 0 {
		affected, err = eru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eru.mutation = mutation
			affected, err = eru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eru.hooks) - 1; i >= 0; i-- {
			if eru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eru *EntityRevisionUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *EntityRevisionUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *EntityRevisionUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eru *EntityRevisionUpdate) defaults() error {
	if _, ok := eru.mutation.UpdatedAt(); !ok {
		if entityrevision.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized entityrevision.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := entityrevision.UpdateDefaultUpdatedAt()
		eru.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (eru *EntityRevisionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entityrevision.Table,
			Columns: entityrevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entityrevision.FieldID,
			},
		},
	}
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityrevision.FieldCreatedBy,
		})
	}
	if eru.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entityrevision.FieldCreatedBy,
		})
	}
	if value, ok := eru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entityrevision.FieldUpdatedAt,
		})
	}
	if value, ok := eru.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityrevision.FieldUpdatedBy,
		})
	}
	if eru.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entityrevision.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityrevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EntityRevisionUpdateOne is the builder for updating a single EntityRevision entity.
type EntityRevisionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityRevisionMutation
}

// SetCreatedBy sets the "created_by" field.
func (eruo *EntityRevisionUpdateOne) SetCreatedBy(q qid.ID) *EntityRevisionUpdateOne {
	eruo.mutation.SetCreatedBy(q)
	return eruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (eruo *EntityRevisionUpdateOne) SetNillableCreatedBy(q *qid.ID) *EntityRevisionUpdateOne {
	if q != nil {
		eruo.SetCreatedBy(*q)
	}
	return eruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (eruo *EntityRevisionUpdateOne) ClearCreatedBy() *EntityRevisionUpdateOne {
	eruo.mutation.ClearCreatedBy()
	return eruo
}

// SetUpdatedAt sets the "updated_at" field.
func (eruo *EntityRevisionUpdateOne) SetUpdatedAt(t time.Time) *EntityRevisionUpdateOne {
	eruo.mutation.SetUpdatedAt(t)
	return eruo
}

// SetUpdatedBy sets the "updated_by" field.
func (eruo *EntityRevisionUpdateOne) SetUpdatedBy(q qid.ID) *EntityRevisionUpdateOne {
	eruo.mutation.SetUpdatedBy(q)
	return eruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eruo *EntityRevisionUpdateOne) SetNillableUpdatedBy(q *qid.ID) *EntityRevisionUpdateOne {
	if q != nil {
		eruo.SetUpdatedBy(*q)
	}
	return eruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eruo *EntityRevisionUpdateOne) ClearUpdatedBy() *EntityRevisionUpdateOne {
	eruo.mutation.ClearUpdatedBy()
	return eruo
}

// Mutation returns the EntityRevisionMutation object of the builder.
func (eruo *EntityRevisionUpdateOne) Mutation() *EntityRevisionMutation {
	return eruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *EntityRevisionUpdateOne) Select(field string, fields ...string) *EntityRevisionUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated EntityRevision entity.
func (eruo *EntityRevisionUpdateOne) Save(ctx context.Context) (*EntityRevision, error) {
	var (
		err  error
		node *EntityRevision
	)
	if err := eruo.defaults(); err != nil {
		return nil, err
	}
	if len(eruo.hooks) == 0 {
		node, err = eruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EntityRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eruo.mutation = mutation
			node, err = eruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eruo.hooks) - 1; i >= 0; i-- {
			if eruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *EntityRevisionUpdateOne) SaveX(ctx context.Context) *EntityRevision {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *EntityRevisionUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *EntityRevisionUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eruo *EntityRevisionUpdateOne) defaults() error {
	if _, ok := eruo.mutation.UpdatedAt(); !ok {
		if entityrevision.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized entityrevision.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := entityrevision.UpdateDefaultUpdatedAt()
		eruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (eruo *EntityRevisionUpdateOne) sqlSave(ctx context.Context) (_node *EntityRevision, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entityrevision.Table,
			Columns: entityrevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entityrevision.FieldID,
			},
		},
	}
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing EntityRevision.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entityrevision.FieldID)
		for _, f := range fields {
			if !entityrevision.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entityrevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityrevision.FieldCreatedBy,
		})
	}
	if eruo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entityrevision.FieldCreatedBy,
		})
	}
	if value, ok := eruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: entityrevision.FieldUpdatedAt,
		})
	}
	if value, ok := eruo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: entityrevision.FieldUpdatedBy,
		})
	}
	if eruo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: entityrevision.FieldUpdatedBy,
		})
	}
	_node = &EntityRevision{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entityrevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
