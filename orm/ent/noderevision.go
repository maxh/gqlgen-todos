// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/maxh/gqlgen-todos/nodevalue"
	"github.com/maxh/gqlgen-todos/orm/ent/noderevision"
	"github.com/maxh/gqlgen-todos/qid"
)

// NodeRevision is the model entity for the NodeRevision schema.
type NodeRevision struct {
	config `json:"-"`
	// ID of the ent.
	ID qid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy qid.ID `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy qid.ID `json:"updated_by,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id,omitempty"`
	// NodeRevision holds the value of the "node_revision" field.
	NodeRevision string `json:"node_revision,omitempty"`
	// NodeValue holds the value of the "node_value" field.
	NodeValue *nodevalue.NodeValue `json:"node_value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodeRevision) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case noderevision.FieldNodeValue:
			values[i] = new([]byte)
		case noderevision.FieldID, noderevision.FieldCreatedBy, noderevision.FieldUpdatedBy:
			values[i] = new(qid.ID)
		case noderevision.FieldNodeID, noderevision.FieldNodeRevision:
			values[i] = new(sql.NullString)
		case noderevision.FieldCreatedAt, noderevision.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NodeRevision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodeRevision fields.
func (nr *NodeRevision) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case noderevision.FieldID:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				nr.ID = *value
			}
		case noderevision.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nr.CreatedAt = value.Time
			}
		case noderevision.FieldCreatedBy:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				nr.CreatedBy = *value
			}
		case noderevision.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nr.UpdatedAt = value.Time
			}
		case noderevision.FieldUpdatedBy:
			if value, ok := values[i].(*qid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				nr.UpdatedBy = *value
			}
		case noderevision.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				nr.NodeID = value.String
			}
		case noderevision.FieldNodeRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_revision", values[i])
			} else if value.Valid {
				nr.NodeRevision = value.String
			}
		case noderevision.FieldNodeValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field node_value", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &nr.NodeValue); err != nil {
					return fmt.Errorf("unmarshal field node_value: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this NodeRevision.
// Note that you need to call NodeRevision.Unwrap() before calling this method if this NodeRevision
// was returned from a transaction, and the transaction was committed or rolled back.
func (nr *NodeRevision) Update() *NodeRevisionUpdateOne {
	return (&NodeRevisionClient{config: nr.config}).UpdateOne(nr)
}

// Unwrap unwraps the NodeRevision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nr *NodeRevision) Unwrap() *NodeRevision {
	tx, ok := nr.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodeRevision is not a transactional entity")
	}
	nr.config.driver = tx.drv
	return nr
}

// String implements the fmt.Stringer.
func (nr *NodeRevision) String() string {
	var builder strings.Builder
	builder.WriteString("NodeRevision(")
	builder.WriteString(fmt.Sprintf("id=%v", nr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(nr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", nr.CreatedBy))
	builder.WriteString(", updated_at=")
	builder.WriteString(nr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", nr.UpdatedBy))
	builder.WriteString(", node_id=")
	builder.WriteString(nr.NodeID)
	builder.WriteString(", node_revision=")
	builder.WriteString(nr.NodeRevision)
	builder.WriteString(", node_value=")
	builder.WriteString(fmt.Sprintf("%v", nr.NodeValue))
	builder.WriteByte(')')
	return builder.String()
}

// NodeRevisions is a parsable slice of NodeRevision.
type NodeRevisions []*NodeRevision

func (nr NodeRevisions) config(cfg config) {
	for _i := range nr {
		nr[_i].config = cfg
	}
}
